{"ast":null,"code":"/*! Fast Average Color | Â© 2021 Denis Seleznev | MIT License | https://github.com/fast-average-color/fast-average-color */\nfunction toHex(num) {\n  var str = num.toString(16);\n  return str.length === 1 ? '0' + str : str;\n}\n\nfunction arrayToHex(arr) {\n  return '#' + arr.map(toHex).join('');\n}\n\nfunction isDark(color) {\n  // http://www.w3.org/TR/AERT#color-contrast\n  var result = (color[0] * 299 + color[1] * 587 + color[2] * 114) / 1000;\n  return result < 128;\n}\n\nfunction prepareIgnoredColor(color) {\n  if (!color) {\n    return [];\n  }\n\n  return isRGBArray(color) ? color : [color];\n}\n\nfunction isRGBArray(value) {\n  return Array.isArray(value[0]);\n}\n\nfunction isIgnoredColor(data, index, ignoredColor) {\n  for (var i = 0; i < ignoredColor.length; i++) {\n    if (isIgnoredColorAsNumbers(data, index, ignoredColor[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction isIgnoredColorAsNumbers(data, index, ignoredColor) {\n  switch (ignoredColor.length) {\n    case 3:\n      // [red, green, blue]\n      if (isIgnoredRGBColor(data, index, ignoredColor)) {\n        return true;\n      }\n\n      break;\n\n    case 4:\n      // [red, green, blue, alpha]\n      if (isIgnoredRGBAColor(data, index, ignoredColor)) {\n        return true;\n      }\n\n      break;\n\n    case 5:\n      // [red, green, blue, alpha, threshold]\n      if (isIgnoredRGBAColorWithThreshold(data, index, ignoredColor)) {\n        return true;\n      }\n\n      break;\n\n    default:\n      return false;\n  }\n}\n\nfunction isIgnoredRGBColor(data, index, ignoredColor) {\n  // Ignore if the pixel are transparent.\n  if (data[index + 3] !== 255) {\n    return true;\n  }\n\n  if (data[index] === ignoredColor[0] && data[index + 1] === ignoredColor[1] && data[index + 2] === ignoredColor[2]) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isIgnoredRGBAColor(data, index, ignoredColor) {\n  if (data[index + 3] && ignoredColor[3]) {\n    return data[index] === ignoredColor[0] && data[index + 1] === ignoredColor[1] && data[index + 2] === ignoredColor[2] && data[index + 3] === ignoredColor[3];\n  } // Ignore rgb components if the pixel are fully transparent.\n\n\n  return data[index + 3] === ignoredColor[3];\n}\n\nfunction inRange(colorComponent, ignoredColorComponent, value) {\n  return colorComponent >= ignoredColorComponent - value && colorComponent <= ignoredColorComponent + value;\n}\n\nfunction isIgnoredRGBAColorWithThreshold(data, index, ignoredColor) {\n  var redIgnored = ignoredColor[0];\n  var greenIgnored = ignoredColor[1];\n  var blueIgnored = ignoredColor[2];\n  var alphaIgnored = ignoredColor[3];\n  var threshold = ignoredColor[4];\n  var alphaData = data[index + 3];\n  var alphaInRange = inRange(alphaData, alphaIgnored, threshold);\n\n  if (!alphaIgnored) {\n    return alphaInRange;\n  }\n\n  if (!alphaData && alphaInRange) {\n    return true;\n  }\n\n  if (inRange(data[index], redIgnored, threshold) && inRange(data[index + 1], greenIgnored, threshold) && inRange(data[index + 2], blueIgnored, threshold) && alphaInRange) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction dominantAlgorithm(arr, len, options) {\n  var colorHash = {};\n  var divider = 24;\n  var ignoredColor = options.ignoredColor;\n  var step = options.step;\n  var max = [0, 0, 0, 0, 0];\n\n  for (var i = 0; i < len; i += step) {\n    var red = arr[i];\n    var green = arr[i + 1];\n    var blue = arr[i + 2];\n    var alpha = arr[i + 3];\n\n    if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n      continue;\n    }\n\n    var key = Math.round(red / divider) + ',' + Math.round(green / divider) + ',' + Math.round(blue / divider);\n\n    if (colorHash[key]) {\n      colorHash[key] = [colorHash[key][0] + red * alpha, colorHash[key][1] + green * alpha, colorHash[key][2] + blue * alpha, colorHash[key][3] + alpha, colorHash[key][4] + 1];\n    } else {\n      colorHash[key] = [red * alpha, green * alpha, blue * alpha, alpha, 1];\n    }\n\n    if (max[4] < colorHash[key][4]) {\n      max = colorHash[key];\n    }\n  }\n\n  var redTotal = max[0];\n  var greenTotal = max[1];\n  var blueTotal = max[2];\n  var alphaTotal = max[3];\n  var count = max[4];\n  return alphaTotal ? [Math.round(redTotal / alphaTotal), Math.round(greenTotal / alphaTotal), Math.round(blueTotal / alphaTotal), Math.round(alphaTotal / count)] : options.defaultColor;\n}\n\nfunction simpleAlgorithm(arr, len, options) {\n  var redTotal = 0;\n  var greenTotal = 0;\n  var blueTotal = 0;\n  var alphaTotal = 0;\n  var count = 0;\n  var ignoredColor = options.ignoredColor;\n  var step = options.step;\n\n  for (var i = 0; i < len; i += step) {\n    var alpha = arr[i + 3];\n    var red = arr[i] * alpha;\n    var green = arr[i + 1] * alpha;\n    var blue = arr[i + 2] * alpha;\n\n    if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n      continue;\n    }\n\n    redTotal += red;\n    greenTotal += green;\n    blueTotal += blue;\n    alphaTotal += alpha;\n    count++;\n  }\n\n  return alphaTotal ? [Math.round(redTotal / alphaTotal), Math.round(greenTotal / alphaTotal), Math.round(blueTotal / alphaTotal), Math.round(alphaTotal / count)] : options.defaultColor;\n}\n\nfunction sqrtAlgorithm(arr, len, options) {\n  var redTotal = 0;\n  var greenTotal = 0;\n  var blueTotal = 0;\n  var alphaTotal = 0;\n  var count = 0;\n  var ignoredColor = options.ignoredColor;\n  var step = options.step;\n\n  for (var i = 0; i < len; i += step) {\n    var red = arr[i];\n    var green = arr[i + 1];\n    var blue = arr[i + 2];\n    var alpha = arr[i + 3];\n\n    if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n      continue;\n    }\n\n    redTotal += red * red * alpha;\n    greenTotal += green * green * alpha;\n    blueTotal += blue * blue * alpha;\n    alphaTotal += alpha;\n    count++;\n  }\n\n  return alphaTotal ? [Math.round(Math.sqrt(redTotal / alphaTotal)), Math.round(Math.sqrt(greenTotal / alphaTotal)), Math.round(Math.sqrt(blueTotal / alphaTotal)), Math.round(alphaTotal / count)] : options.defaultColor;\n}\n\nfunction getDefaultColor(options) {\n  return getOption(options, 'defaultColor', [0, 0, 0, 0]);\n}\n\nfunction getOption(options, name, defaultValue) {\n  return options[name] === undefined ? defaultValue : options[name];\n}\n\nvar MIN_SIZE = 10;\nvar MAX_SIZE = 100;\n\nfunction isSvg(filename) {\n  return filename.search(/\\.svg(\\?|$)/i) !== -1;\n}\n\nfunction getOriginalSize(resource) {\n  if (resource instanceof HTMLImageElement) {\n    var width = resource.naturalWidth;\n    var height = resource.naturalHeight; // For SVG images with only viewBox attr.\n\n    if (!resource.naturalWidth && isSvg(resource.src)) {\n      width = height = MAX_SIZE;\n    }\n\n    return {\n      width: width,\n      height: height\n    };\n  }\n\n  if (resource instanceof HTMLVideoElement) {\n    return {\n      width: resource.videoWidth,\n      height: resource.videoHeight\n    };\n  }\n\n  return {\n    width: resource.width,\n    height: resource.height\n  };\n}\n\nfunction getSrc(resource) {\n  return resource instanceof HTMLCanvasElement ? 'canvas' : resource.src;\n}\n\nfunction prepareSizeAndPosition(originalSize, options) {\n  var srcLeft = getOption(options, 'left', 0);\n  var srcTop = getOption(options, 'top', 0);\n  var srcWidth = getOption(options, 'width', originalSize.width);\n  var srcHeight = getOption(options, 'height', originalSize.height);\n  var destWidth = srcWidth;\n  var destHeight = srcHeight;\n\n  if (options.mode === 'precision') {\n    return {\n      srcLeft: srcLeft,\n      srcTop: srcTop,\n      srcWidth: srcWidth,\n      srcHeight: srcHeight,\n      destWidth: destWidth,\n      destHeight: destHeight\n    };\n  }\n\n  var factor;\n\n  if (srcWidth > srcHeight) {\n    factor = srcWidth / srcHeight;\n    destWidth = MAX_SIZE;\n    destHeight = Math.round(destWidth / factor);\n  } else {\n    factor = srcHeight / srcWidth;\n    destHeight = MAX_SIZE;\n    destWidth = Math.round(destHeight / factor);\n  }\n\n  if (destWidth > srcWidth || destHeight > srcHeight || destWidth < MIN_SIZE || destHeight < MIN_SIZE) {\n    destWidth = srcWidth;\n    destHeight = srcHeight;\n  }\n\n  return {\n    srcLeft: srcLeft,\n    srcTop: srcTop,\n    srcWidth: srcWidth,\n    srcHeight: srcHeight,\n    destWidth: destWidth,\n    destHeight: destHeight\n  };\n}\n\nfunction makeCanvas() {\n  return typeof window === 'undefined' ? new OffscreenCanvas(1, 1) : document.createElement('canvas');\n}\n\nvar ERROR_PREFIX = 'FastAverageColor: ';\n\nfunction outputError(message, silent, error) {\n  if (!silent) {\n    console.error(ERROR_PREFIX + message);\n\n    if (error) {\n      console.error(error);\n    }\n  }\n}\n\nfunction getError(text) {\n  return Error(ERROR_PREFIX + text);\n}\n\nvar FastAverageColor =\n/** @class */\nfunction () {\n  function FastAverageColor() {\n    this.canvas = null;\n    this.ctx = null;\n  }\n  /**\n   * Get asynchronously the average color from not loaded image.\n   */\n\n\n  FastAverageColor.prototype.getColorAsync = function (resource, options) {\n    if (!resource) {\n      return Promise.reject(getError('call .getColorAsync() without resource.'));\n    }\n\n    if (typeof resource === 'string') {\n      var img = new Image();\n      img.crossOrigin = '';\n      img.src = resource;\n      return this.bindImageEvents(img, options);\n    } else if (resource instanceof Image && !resource.complete) {\n      return this.bindImageEvents(resource, options);\n    } else {\n      var result = this.getColor(resource, options);\n      return result.error ? Promise.reject(result.error) : Promise.resolve(result);\n    }\n  };\n  /**\n   * Get the average color from images, videos and canvas.\n   */\n\n\n  FastAverageColor.prototype.getColor = function (resource, options) {\n    options = options || {};\n    var defaultColor = getDefaultColor(options);\n\n    if (!resource) {\n      outputError('call .getColor(null) without resource.', options.silent);\n      return this.prepareResult(defaultColor);\n    }\n\n    var originalSize = getOriginalSize(resource);\n    var size = prepareSizeAndPosition(originalSize, options);\n\n    if (!size.srcWidth || !size.srcHeight || !size.destWidth || !size.destHeight) {\n      outputError(\"incorrect sizes for resource \\\"\" + getSrc(resource) + \"\\\".\", options.silent);\n      return this.prepareResult(defaultColor);\n    }\n\n    if (!this.canvas) {\n      this.canvas = makeCanvas();\n    }\n\n    if (!this.ctx) {\n      this.ctx = this.canvas.getContext && this.canvas.getContext('2d');\n\n      if (!this.ctx) {\n        outputError('Canvas Context 2D is not supported in this browser.', options.silent);\n        return this.prepareResult(defaultColor);\n      }\n    }\n\n    this.canvas.width = size.destWidth;\n    this.canvas.height = size.destHeight;\n    var value = defaultColor;\n\n    try {\n      this.ctx.clearRect(0, 0, size.destWidth, size.destHeight);\n      this.ctx.drawImage(resource, size.srcLeft, size.srcTop, size.srcWidth, size.srcHeight, 0, 0, size.destWidth, size.destHeight);\n      var bitmapData = this.ctx.getImageData(0, 0, size.destWidth, size.destHeight).data;\n      value = this.getColorFromArray4(bitmapData, options);\n    } catch (e) {\n      outputError(\"security error (CORS) for resource \" + getSrc(resource) + \".\\nDetails: https://developer.mozilla.org/en/docs/Web/HTML/CORS_enabled_image\", options.silent, e);\n    }\n\n    return this.prepareResult(value);\n  };\n  /**\n   * Get the average color from a array when 1 pixel is 4 bytes.\n   */\n\n\n  FastAverageColor.prototype.getColorFromArray4 = function (arr, options) {\n    options = options || {};\n    var bytesPerPixel = 4;\n    var arrLength = arr.length;\n    var defaultColor = getDefaultColor(options);\n\n    if (arrLength < bytesPerPixel) {\n      return defaultColor;\n    }\n\n    var len = arrLength - arrLength % bytesPerPixel;\n    var step = (options.step || 1) * bytesPerPixel;\n    var algorithm;\n\n    switch (options.algorithm || 'sqrt') {\n      case 'simple':\n        algorithm = simpleAlgorithm;\n        break;\n\n      case 'sqrt':\n        algorithm = sqrtAlgorithm;\n        break;\n\n      case 'dominant':\n        algorithm = dominantAlgorithm;\n        break;\n\n      default:\n        throw getError(options.algorithm + \" is unknown algorithm.\");\n    }\n\n    return algorithm(arr, len, {\n      defaultColor: defaultColor,\n      ignoredColor: prepareIgnoredColor(options.ignoredColor),\n      step: step\n    });\n  };\n  /**\n   * Get color data from value ([r, g, b, a]).\n   */\n\n\n  FastAverageColor.prototype.prepareResult = function (value) {\n    var rgb = value.slice(0, 3);\n    var rgba = [value[0], value[1], value[2], value[3] / 255];\n    var isDarkColor = isDark(value);\n    return {\n      value: [value[0], value[1], value[2], value[3]],\n      rgb: 'rgb(' + rgb.join(',') + ')',\n      rgba: 'rgba(' + rgba.join(',') + ')',\n      hex: arrayToHex(rgb),\n      hexa: arrayToHex(value),\n      isDark: isDarkColor,\n      isLight: !isDarkColor\n    };\n  };\n  /**\n   * Destroy the instance.\n   */\n\n\n  FastAverageColor.prototype.destroy = function () {\n    this.canvas = null;\n    this.ctx = null;\n  };\n\n  FastAverageColor.prototype.bindImageEvents = function (resource, options) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var onload = function () {\n        unbindEvents();\n\n        var result = _this.getColor(resource, options);\n\n        if (result.error) {\n          reject(result.error);\n        } else {\n          resolve(result);\n        }\n      };\n\n      var onerror = function () {\n        unbindEvents();\n        reject(getError(\"Error loading image \\\"\" + resource.src + \"\\\".\"));\n      };\n\n      var onabort = function () {\n        unbindEvents();\n        reject(getError(\"Image \\\"\" + resource.src + \"\\\" loading aborted.\"));\n      };\n\n      var unbindEvents = function () {\n        resource.removeEventListener('load', onload);\n        resource.removeEventListener('error', onerror);\n        resource.removeEventListener('abort', onabort);\n      };\n\n      resource.addEventListener('load', onload);\n      resource.addEventListener('error', onerror);\n      resource.addEventListener('abort', onabort);\n    });\n  };\n\n  return FastAverageColor;\n}();\n\nexport { FastAverageColor as default };","map":{"version":3,"sources":["D:/Spotify-api/Spotify-api/my-app/node_modules/fast-average-color/dist/index.esm.js"],"names":["toHex","num","str","toString","length","arrayToHex","arr","map","join","isDark","color","result","prepareIgnoredColor","isRGBArray","value","Array","isArray","isIgnoredColor","data","index","ignoredColor","i","isIgnoredColorAsNumbers","isIgnoredRGBColor","isIgnoredRGBAColor","isIgnoredRGBAColorWithThreshold","inRange","colorComponent","ignoredColorComponent","redIgnored","greenIgnored","blueIgnored","alphaIgnored","threshold","alphaData","alphaInRange","dominantAlgorithm","len","options","colorHash","divider","step","max","red","green","blue","alpha","key","Math","round","redTotal","greenTotal","blueTotal","alphaTotal","count","defaultColor","simpleAlgorithm","sqrtAlgorithm","sqrt","getDefaultColor","getOption","name","defaultValue","undefined","MIN_SIZE","MAX_SIZE","isSvg","filename","search","getOriginalSize","resource","HTMLImageElement","width","naturalWidth","height","naturalHeight","src","HTMLVideoElement","videoWidth","videoHeight","getSrc","HTMLCanvasElement","prepareSizeAndPosition","originalSize","srcLeft","srcTop","srcWidth","srcHeight","destWidth","destHeight","mode","factor","makeCanvas","window","OffscreenCanvas","document","createElement","ERROR_PREFIX","outputError","message","silent","error","console","getError","text","Error","FastAverageColor","canvas","ctx","prototype","getColorAsync","Promise","reject","img","Image","crossOrigin","bindImageEvents","complete","getColor","resolve","prepareResult","size","getContext","clearRect","drawImage","bitmapData","getImageData","getColorFromArray4","e","bytesPerPixel","arrLength","algorithm","rgb","slice","rgba","isDarkColor","hex","hexa","isLight","destroy","_this","onload","unbindEvents","onerror","onabort","removeEventListener","addEventListener","default"],"mappings":"AAAA;AACA,SAASA,KAAT,CAAeC,GAAf,EAAoB;AAChB,MAAIC,GAAG,GAAGD,GAAG,CAACE,QAAJ,CAAa,EAAb,CAAV;AACA,SAAOD,GAAG,CAACE,MAAJ,KAAe,CAAf,GAAmB,MAAMF,GAAzB,GAA+BA,GAAtC;AACH;;AACD,SAASG,UAAT,CAAoBC,GAApB,EAAyB;AACrB,SAAO,MAAMA,GAAG,CAACC,GAAJ,CAAQP,KAAR,EAAeQ,IAAf,CAAoB,EAApB,CAAb;AACH;;AACD,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACnB;AACA,MAAIC,MAAM,GAAG,CAACD,KAAK,CAAC,CAAD,CAAL,GAAW,GAAX,GAAiBA,KAAK,CAAC,CAAD,CAAL,GAAW,GAA5B,GAAkCA,KAAK,CAAC,CAAD,CAAL,GAAW,GAA9C,IAAqD,IAAlE;AACA,SAAOC,MAAM,GAAG,GAAhB;AACH;;AACD,SAASC,mBAAT,CAA6BF,KAA7B,EAAoC;AAChC,MAAI,CAACA,KAAL,EAAY;AACR,WAAO,EAAP;AACH;;AACD,SAAOG,UAAU,CAACH,KAAD,CAAV,GAAoBA,KAApB,GAA4B,CAACA,KAAD,CAAnC;AACH;;AACD,SAASG,UAAT,CAAoBC,KAApB,EAA2B;AACvB,SAAOC,KAAK,CAACC,OAAN,CAAcF,KAAK,CAAC,CAAD,CAAnB,CAAP;AACH;;AACD,SAASG,cAAT,CAAwBC,IAAxB,EAA8BC,KAA9B,EAAqCC,YAArC,EAAmD;AAC/C,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAAY,CAAChB,MAAjC,EAAyCiB,CAAC,EAA1C,EAA8C;AAC1C,QAAIC,uBAAuB,CAACJ,IAAD,EAAOC,KAAP,EAAcC,YAAY,CAACC,CAAD,CAA1B,CAA3B,EAA2D;AACvD,aAAO,IAAP;AACH;AACJ;;AACD,SAAO,KAAP;AACH;;AACD,SAASC,uBAAT,CAAiCJ,IAAjC,EAAuCC,KAAvC,EAA8CC,YAA9C,EAA4D;AACxD,UAAQA,YAAY,CAAChB,MAArB;AACI,SAAK,CAAL;AACI;AACA,UAAImB,iBAAiB,CAACL,IAAD,EAAOC,KAAP,EAAcC,YAAd,CAArB,EAAkD;AAC9C,eAAO,IAAP;AACH;;AACD;;AACJ,SAAK,CAAL;AACI;AACA,UAAII,kBAAkB,CAACN,IAAD,EAAOC,KAAP,EAAcC,YAAd,CAAtB,EAAmD;AAC/C,eAAO,IAAP;AACH;;AACD;;AACJ,SAAK,CAAL;AACI;AACA,UAAIK,+BAA+B,CAACP,IAAD,EAAOC,KAAP,EAAcC,YAAd,CAAnC,EAAgE;AAC5D,eAAO,IAAP;AACH;;AACD;;AACJ;AACI,aAAO,KAAP;AApBR;AAsBH;;AACD,SAASG,iBAAT,CAA2BL,IAA3B,EAAiCC,KAAjC,EAAwCC,YAAxC,EAAsD;AAClD;AACA,MAAIF,IAAI,CAACC,KAAK,GAAG,CAAT,CAAJ,KAAoB,GAAxB,EAA6B;AACzB,WAAO,IAAP;AACH;;AACD,MAAID,IAAI,CAACC,KAAD,CAAJ,KAAgBC,YAAY,CAAC,CAAD,CAA5B,IACAF,IAAI,CAACC,KAAK,GAAG,CAAT,CAAJ,KAAoBC,YAAY,CAAC,CAAD,CADhC,IAEAF,IAAI,CAACC,KAAK,GAAG,CAAT,CAAJ,KAAoBC,YAAY,CAAC,CAAD,CAFpC,EAEyC;AACrC,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH;;AACD,SAASI,kBAAT,CAA4BN,IAA5B,EAAkCC,KAAlC,EAAyCC,YAAzC,EAAuD;AACnD,MAAIF,IAAI,CAACC,KAAK,GAAG,CAAT,CAAJ,IAAmBC,YAAY,CAAC,CAAD,CAAnC,EAAwC;AACpC,WAAOF,IAAI,CAACC,KAAD,CAAJ,KAAgBC,YAAY,CAAC,CAAD,CAA5B,IACHF,IAAI,CAACC,KAAK,GAAG,CAAT,CAAJ,KAAoBC,YAAY,CAAC,CAAD,CAD7B,IAEHF,IAAI,CAACC,KAAK,GAAG,CAAT,CAAJ,KAAoBC,YAAY,CAAC,CAAD,CAF7B,IAGHF,IAAI,CAACC,KAAK,GAAG,CAAT,CAAJ,KAAoBC,YAAY,CAAC,CAAD,CAHpC;AAIH,GANkD,CAOnD;;;AACA,SAAOF,IAAI,CAACC,KAAK,GAAG,CAAT,CAAJ,KAAoBC,YAAY,CAAC,CAAD,CAAvC;AACH;;AACD,SAASM,OAAT,CAAiBC,cAAjB,EAAiCC,qBAAjC,EAAwDd,KAAxD,EAA+D;AAC3D,SAAOa,cAAc,IAAKC,qBAAqB,GAAGd,KAA3C,IACHa,cAAc,IAAKC,qBAAqB,GAAGd,KAD/C;AAEH;;AACD,SAASW,+BAAT,CAAyCP,IAAzC,EAA+CC,KAA/C,EAAsDC,YAAtD,EAAoE;AAChE,MAAIS,UAAU,GAAGT,YAAY,CAAC,CAAD,CAA7B;AACA,MAAIU,YAAY,GAAGV,YAAY,CAAC,CAAD,CAA/B;AACA,MAAIW,WAAW,GAAGX,YAAY,CAAC,CAAD,CAA9B;AACA,MAAIY,YAAY,GAAGZ,YAAY,CAAC,CAAD,CAA/B;AACA,MAAIa,SAAS,GAAGb,YAAY,CAAC,CAAD,CAA5B;AACA,MAAIc,SAAS,GAAGhB,IAAI,CAACC,KAAK,GAAG,CAAT,CAApB;AACA,MAAIgB,YAAY,GAAGT,OAAO,CAACQ,SAAD,EAAYF,YAAZ,EAA0BC,SAA1B,CAA1B;;AACA,MAAI,CAACD,YAAL,EAAmB;AACf,WAAOG,YAAP;AACH;;AACD,MAAI,CAACD,SAAD,IAAcC,YAAlB,EAAgC;AAC5B,WAAO,IAAP;AACH;;AACD,MAAIT,OAAO,CAACR,IAAI,CAACC,KAAD,CAAL,EAAcU,UAAd,EAA0BI,SAA1B,CAAP,IACAP,OAAO,CAACR,IAAI,CAACC,KAAK,GAAG,CAAT,CAAL,EAAkBW,YAAlB,EAAgCG,SAAhC,CADP,IAEAP,OAAO,CAACR,IAAI,CAACC,KAAK,GAAG,CAAT,CAAL,EAAkBY,WAAlB,EAA+BE,SAA/B,CAFP,IAGAE,YAHJ,EAGkB;AACd,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH;;AAED,SAASC,iBAAT,CAA2B9B,GAA3B,EAAgC+B,GAAhC,EAAqCC,OAArC,EAA8C;AAC1C,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIpB,YAAY,GAAGkB,OAAO,CAAClB,YAA3B;AACA,MAAIqB,IAAI,GAAGH,OAAO,CAACG,IAAnB;AACA,MAAIC,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAV;;AACA,OAAK,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,GAApB,EAAyBhB,CAAC,IAAIoB,IAA9B,EAAoC;AAChC,QAAIE,GAAG,GAAGrC,GAAG,CAACe,CAAD,CAAb;AACA,QAAIuB,KAAK,GAAGtC,GAAG,CAACe,CAAC,GAAG,CAAL,CAAf;AACA,QAAIwB,IAAI,GAAGvC,GAAG,CAACe,CAAC,GAAG,CAAL,CAAd;AACA,QAAIyB,KAAK,GAAGxC,GAAG,CAACe,CAAC,GAAG,CAAL,CAAf;;AACA,QAAID,YAAY,IAAIH,cAAc,CAACX,GAAD,EAAMe,CAAN,EAASD,YAAT,CAAlC,EAA0D;AACtD;AACH;;AACD,QAAI2B,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWN,GAAG,GAAGH,OAAjB,IAA4B,GAA5B,GACNQ,IAAI,CAACC,KAAL,CAAWL,KAAK,GAAGJ,OAAnB,CADM,GACwB,GADxB,GAENQ,IAAI,CAACC,KAAL,CAAWJ,IAAI,GAAGL,OAAlB,CAFJ;;AAGA,QAAID,SAAS,CAACQ,GAAD,CAAb,EAAoB;AAChBR,MAAAA,SAAS,CAACQ,GAAD,CAAT,GAAiB,CACbR,SAAS,CAACQ,GAAD,CAAT,CAAe,CAAf,IAAoBJ,GAAG,GAAGG,KADb,EAEbP,SAAS,CAACQ,GAAD,CAAT,CAAe,CAAf,IAAoBH,KAAK,GAAGE,KAFf,EAGbP,SAAS,CAACQ,GAAD,CAAT,CAAe,CAAf,IAAoBF,IAAI,GAAGC,KAHd,EAIbP,SAAS,CAACQ,GAAD,CAAT,CAAe,CAAf,IAAoBD,KAJP,EAKbP,SAAS,CAACQ,GAAD,CAAT,CAAe,CAAf,IAAoB,CALP,CAAjB;AAOH,KARD,MASK;AACDR,MAAAA,SAAS,CAACQ,GAAD,CAAT,GAAiB,CAACJ,GAAG,GAAGG,KAAP,EAAcF,KAAK,GAAGE,KAAtB,EAA6BD,IAAI,GAAGC,KAApC,EAA2CA,KAA3C,EAAkD,CAAlD,CAAjB;AACH;;AACD,QAAIJ,GAAG,CAAC,CAAD,CAAH,GAASH,SAAS,CAACQ,GAAD,CAAT,CAAe,CAAf,CAAb,EAAgC;AAC5BL,MAAAA,GAAG,GAAGH,SAAS,CAACQ,GAAD,CAAf;AACH;AACJ;;AACD,MAAIG,QAAQ,GAAGR,GAAG,CAAC,CAAD,CAAlB;AACA,MAAIS,UAAU,GAAGT,GAAG,CAAC,CAAD,CAApB;AACA,MAAIU,SAAS,GAAGV,GAAG,CAAC,CAAD,CAAnB;AACA,MAAIW,UAAU,GAAGX,GAAG,CAAC,CAAD,CAApB;AACA,MAAIY,KAAK,GAAGZ,GAAG,CAAC,CAAD,CAAf;AACA,SAAOW,UAAU,GAAG,CAChBL,IAAI,CAACC,KAAL,CAAWC,QAAQ,GAAGG,UAAtB,CADgB,EAEhBL,IAAI,CAACC,KAAL,CAAWE,UAAU,GAAGE,UAAxB,CAFgB,EAGhBL,IAAI,CAACC,KAAL,CAAWG,SAAS,GAAGC,UAAvB,CAHgB,EAIhBL,IAAI,CAACC,KAAL,CAAWI,UAAU,GAAGC,KAAxB,CAJgB,CAAH,GAKbhB,OAAO,CAACiB,YALZ;AAMH;;AAED,SAASC,eAAT,CAAyBlD,GAAzB,EAA8B+B,GAA9B,EAAmCC,OAAnC,EAA4C;AACxC,MAAIY,QAAQ,GAAG,CAAf;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIlC,YAAY,GAAGkB,OAAO,CAAClB,YAA3B;AACA,MAAIqB,IAAI,GAAGH,OAAO,CAACG,IAAnB;;AACA,OAAK,IAAIpB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,GAApB,EAAyBhB,CAAC,IAAIoB,IAA9B,EAAoC;AAChC,QAAIK,KAAK,GAAGxC,GAAG,CAACe,CAAC,GAAG,CAAL,CAAf;AACA,QAAIsB,GAAG,GAAGrC,GAAG,CAACe,CAAD,CAAH,GAASyB,KAAnB;AACA,QAAIF,KAAK,GAAGtC,GAAG,CAACe,CAAC,GAAG,CAAL,CAAH,GAAayB,KAAzB;AACA,QAAID,IAAI,GAAGvC,GAAG,CAACe,CAAC,GAAG,CAAL,CAAH,GAAayB,KAAxB;;AACA,QAAI1B,YAAY,IAAIH,cAAc,CAACX,GAAD,EAAMe,CAAN,EAASD,YAAT,CAAlC,EAA0D;AACtD;AACH;;AACD8B,IAAAA,QAAQ,IAAIP,GAAZ;AACAQ,IAAAA,UAAU,IAAIP,KAAd;AACAQ,IAAAA,SAAS,IAAIP,IAAb;AACAQ,IAAAA,UAAU,IAAIP,KAAd;AACAQ,IAAAA,KAAK;AACR;;AACD,SAAOD,UAAU,GAAG,CAChBL,IAAI,CAACC,KAAL,CAAWC,QAAQ,GAAGG,UAAtB,CADgB,EAEhBL,IAAI,CAACC,KAAL,CAAWE,UAAU,GAAGE,UAAxB,CAFgB,EAGhBL,IAAI,CAACC,KAAL,CAAWG,SAAS,GAAGC,UAAvB,CAHgB,EAIhBL,IAAI,CAACC,KAAL,CAAWI,UAAU,GAAGC,KAAxB,CAJgB,CAAH,GAKbhB,OAAO,CAACiB,YALZ;AAMH;;AAED,SAASE,aAAT,CAAuBnD,GAAvB,EAA4B+B,GAA5B,EAAiCC,OAAjC,EAA0C;AACtC,MAAIY,QAAQ,GAAG,CAAf;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIlC,YAAY,GAAGkB,OAAO,CAAClB,YAA3B;AACA,MAAIqB,IAAI,GAAGH,OAAO,CAACG,IAAnB;;AACA,OAAK,IAAIpB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,GAApB,EAAyBhB,CAAC,IAAIoB,IAA9B,EAAoC;AAChC,QAAIE,GAAG,GAAGrC,GAAG,CAACe,CAAD,CAAb;AACA,QAAIuB,KAAK,GAAGtC,GAAG,CAACe,CAAC,GAAG,CAAL,CAAf;AACA,QAAIwB,IAAI,GAAGvC,GAAG,CAACe,CAAC,GAAG,CAAL,CAAd;AACA,QAAIyB,KAAK,GAAGxC,GAAG,CAACe,CAAC,GAAG,CAAL,CAAf;;AACA,QAAID,YAAY,IAAIH,cAAc,CAACX,GAAD,EAAMe,CAAN,EAASD,YAAT,CAAlC,EAA0D;AACtD;AACH;;AACD8B,IAAAA,QAAQ,IAAIP,GAAG,GAAGA,GAAN,GAAYG,KAAxB;AACAK,IAAAA,UAAU,IAAIP,KAAK,GAAGA,KAAR,GAAgBE,KAA9B;AACAM,IAAAA,SAAS,IAAIP,IAAI,GAAGA,IAAP,GAAcC,KAA3B;AACAO,IAAAA,UAAU,IAAIP,KAAd;AACAQ,IAAAA,KAAK;AACR;;AACD,SAAOD,UAAU,GAAG,CAChBL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACU,IAAL,CAAUR,QAAQ,GAAGG,UAArB,CAAX,CADgB,EAEhBL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACU,IAAL,CAAUP,UAAU,GAAGE,UAAvB,CAAX,CAFgB,EAGhBL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACU,IAAL,CAAUN,SAAS,GAAGC,UAAtB,CAAX,CAHgB,EAIhBL,IAAI,CAACC,KAAL,CAAWI,UAAU,GAAGC,KAAxB,CAJgB,CAAH,GAKbhB,OAAO,CAACiB,YALZ;AAMH;;AAED,SAASI,eAAT,CAAyBrB,OAAzB,EAAkC;AAC9B,SAAOsB,SAAS,CAACtB,OAAD,EAAU,cAAV,EAA0B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA1B,CAAhB;AACH;;AACD,SAASsB,SAAT,CAAmBtB,OAAnB,EAA4BuB,IAA5B,EAAkCC,YAAlC,EAAgD;AAC5C,SAAQxB,OAAO,CAACuB,IAAD,CAAP,KAAkBE,SAAlB,GAA8BD,YAA9B,GAA6CxB,OAAO,CAACuB,IAAD,CAA5D;AACH;;AAED,IAAIG,QAAQ,GAAG,EAAf;AACA,IAAIC,QAAQ,GAAG,GAAf;;AACA,SAASC,KAAT,CAAeC,QAAf,EAAyB;AACrB,SAAOA,QAAQ,CAACC,MAAT,CAAgB,cAAhB,MAAoC,CAAC,CAA5C;AACH;;AACD,SAASC,eAAT,CAAyBC,QAAzB,EAAmC;AAC/B,MAAIA,QAAQ,YAAYC,gBAAxB,EAA0C;AACtC,QAAIC,KAAK,GAAGF,QAAQ,CAACG,YAArB;AACA,QAAIC,MAAM,GAAGJ,QAAQ,CAACK,aAAtB,CAFsC,CAGtC;;AACA,QAAI,CAACL,QAAQ,CAACG,YAAV,IAA0BP,KAAK,CAACI,QAAQ,CAACM,GAAV,CAAnC,EAAmD;AAC/CJ,MAAAA,KAAK,GAAGE,MAAM,GAAGT,QAAjB;AACH;;AACD,WAAO;AACHO,MAAAA,KAAK,EAAEA,KADJ;AAEHE,MAAAA,MAAM,EAAEA;AAFL,KAAP;AAIH;;AACD,MAAIJ,QAAQ,YAAYO,gBAAxB,EAA0C;AACtC,WAAO;AACHL,MAAAA,KAAK,EAAEF,QAAQ,CAACQ,UADb;AAEHJ,MAAAA,MAAM,EAAEJ,QAAQ,CAACS;AAFd,KAAP;AAIH;;AACD,SAAO;AACHP,IAAAA,KAAK,EAAEF,QAAQ,CAACE,KADb;AAEHE,IAAAA,MAAM,EAAEJ,QAAQ,CAACI;AAFd,GAAP;AAIH;;AACD,SAASM,MAAT,CAAgBV,QAAhB,EAA0B;AACtB,SAAOA,QAAQ,YAAYW,iBAApB,GAAwC,QAAxC,GAAmDX,QAAQ,CAACM,GAAnE;AACH;;AACD,SAASM,sBAAT,CAAgCC,YAAhC,EAA8C7C,OAA9C,EAAuD;AACnD,MAAI8C,OAAO,GAAGxB,SAAS,CAACtB,OAAD,EAAU,MAAV,EAAkB,CAAlB,CAAvB;AACA,MAAI+C,MAAM,GAAGzB,SAAS,CAACtB,OAAD,EAAU,KAAV,EAAiB,CAAjB,CAAtB;AACA,MAAIgD,QAAQ,GAAG1B,SAAS,CAACtB,OAAD,EAAU,OAAV,EAAmB6C,YAAY,CAACX,KAAhC,CAAxB;AACA,MAAIe,SAAS,GAAG3B,SAAS,CAACtB,OAAD,EAAU,QAAV,EAAoB6C,YAAY,CAACT,MAAjC,CAAzB;AACA,MAAIc,SAAS,GAAGF,QAAhB;AACA,MAAIG,UAAU,GAAGF,SAAjB;;AACA,MAAIjD,OAAO,CAACoD,IAAR,KAAiB,WAArB,EAAkC;AAC9B,WAAO;AACHN,MAAAA,OAAO,EAAEA,OADN;AAEHC,MAAAA,MAAM,EAAEA,MAFL;AAGHC,MAAAA,QAAQ,EAAEA,QAHP;AAIHC,MAAAA,SAAS,EAAEA,SAJR;AAKHC,MAAAA,SAAS,EAAEA,SALR;AAMHC,MAAAA,UAAU,EAAEA;AANT,KAAP;AAQH;;AACD,MAAIE,MAAJ;;AACA,MAAIL,QAAQ,GAAGC,SAAf,EAA0B;AACtBI,IAAAA,MAAM,GAAGL,QAAQ,GAAGC,SAApB;AACAC,IAAAA,SAAS,GAAGvB,QAAZ;AACAwB,IAAAA,UAAU,GAAGzC,IAAI,CAACC,KAAL,CAAWuC,SAAS,GAAGG,MAAvB,CAAb;AACH,GAJD,MAKK;AACDA,IAAAA,MAAM,GAAGJ,SAAS,GAAGD,QAArB;AACAG,IAAAA,UAAU,GAAGxB,QAAb;AACAuB,IAAAA,SAAS,GAAGxC,IAAI,CAACC,KAAL,CAAWwC,UAAU,GAAGE,MAAxB,CAAZ;AACH;;AACD,MAAIH,SAAS,GAAGF,QAAZ,IAAwBG,UAAU,GAAGF,SAArC,IACAC,SAAS,GAAGxB,QADZ,IACwByB,UAAU,GAAGzB,QADzC,EACmD;AAC/CwB,IAAAA,SAAS,GAAGF,QAAZ;AACAG,IAAAA,UAAU,GAAGF,SAAb;AACH;;AACD,SAAO;AACHH,IAAAA,OAAO,EAAEA,OADN;AAEHC,IAAAA,MAAM,EAAEA,MAFL;AAGHC,IAAAA,QAAQ,EAAEA,QAHP;AAIHC,IAAAA,SAAS,EAAEA,SAJR;AAKHC,IAAAA,SAAS,EAAEA,SALR;AAMHC,IAAAA,UAAU,EAAEA;AANT,GAAP;AAQH;;AACD,SAASG,UAAT,GAAsB;AAClB,SAAO,OAAOC,MAAP,KAAkB,WAAlB,GACH,IAAIC,eAAJ,CAAoB,CAApB,EAAuB,CAAvB,CADG,GAEHC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAFJ;AAGH;;AAED,IAAIC,YAAY,GAAG,oBAAnB;;AACA,SAASC,WAAT,CAAqBC,OAArB,EAA8BC,MAA9B,EAAsCC,KAAtC,EAA6C;AACzC,MAAI,CAACD,MAAL,EAAa;AACTE,IAAAA,OAAO,CAACD,KAAR,CAAcJ,YAAY,GAAGE,OAA7B;;AACA,QAAIE,KAAJ,EAAW;AACPC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH;AACJ;AACJ;;AACD,SAASE,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOC,KAAK,CAACR,YAAY,GAAGO,IAAhB,CAAZ;AACH;;AAED,IAAIE,gBAAgB;AAAG;AAAe,YAAY;AAC9C,WAASA,gBAAT,GAA4B;AACxB,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,GAAL,GAAW,IAAX;AACH;AACD;AACJ;AACA;;;AACIF,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BC,aAA3B,GAA2C,UAAUxC,QAAV,EAAoBhC,OAApB,EAA6B;AACpE,QAAI,CAACgC,QAAL,EAAe;AACX,aAAOyC,OAAO,CAACC,MAAR,CAAeT,QAAQ,CAAC,yCAAD,CAAvB,CAAP;AACH;;AACD,QAAI,OAAOjC,QAAP,KAAoB,QAAxB,EAAkC;AAC9B,UAAI2C,GAAG,GAAG,IAAIC,KAAJ,EAAV;AACAD,MAAAA,GAAG,CAACE,WAAJ,GAAkB,EAAlB;AACAF,MAAAA,GAAG,CAACrC,GAAJ,GAAUN,QAAV;AACA,aAAO,KAAK8C,eAAL,CAAqBH,GAArB,EAA0B3E,OAA1B,CAAP;AACH,KALD,MAMK,IAAIgC,QAAQ,YAAY4C,KAApB,IAA6B,CAAC5C,QAAQ,CAAC+C,QAA3C,EAAqD;AACtD,aAAO,KAAKD,eAAL,CAAqB9C,QAArB,EAA+BhC,OAA/B,CAAP;AACH,KAFI,MAGA;AACD,UAAI3B,MAAM,GAAG,KAAK2G,QAAL,CAAchD,QAAd,EAAwBhC,OAAxB,CAAb;AACA,aAAO3B,MAAM,CAAC0F,KAAP,GAAeU,OAAO,CAACC,MAAR,CAAerG,MAAM,CAAC0F,KAAtB,CAAf,GAA8CU,OAAO,CAACQ,OAAR,CAAgB5G,MAAhB,CAArD;AACH;AACJ,GAjBD;AAkBA;AACJ;AACA;;;AACI+F,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BS,QAA3B,GAAsC,UAAUhD,QAAV,EAAoBhC,OAApB,EAA6B;AAC/DA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,QAAIiB,YAAY,GAAGI,eAAe,CAACrB,OAAD,CAAlC;;AACA,QAAI,CAACgC,QAAL,EAAe;AACX4B,MAAAA,WAAW,CAAC,wCAAD,EAA2C5D,OAAO,CAAC8D,MAAnD,CAAX;AACA,aAAO,KAAKoB,aAAL,CAAmBjE,YAAnB,CAAP;AACH;;AACD,QAAI4B,YAAY,GAAGd,eAAe,CAACC,QAAD,CAAlC;AACA,QAAImD,IAAI,GAAGvC,sBAAsB,CAACC,YAAD,EAAe7C,OAAf,CAAjC;;AACA,QAAI,CAACmF,IAAI,CAACnC,QAAN,IAAkB,CAACmC,IAAI,CAAClC,SAAxB,IAAqC,CAACkC,IAAI,CAACjC,SAA3C,IAAwD,CAACiC,IAAI,CAAChC,UAAlE,EAA8E;AAC1ES,MAAAA,WAAW,CAAC,oCAAoClB,MAAM,CAACV,QAAD,CAA1C,GAAuD,KAAxD,EAA+DhC,OAAO,CAAC8D,MAAvE,CAAX;AACA,aAAO,KAAKoB,aAAL,CAAmBjE,YAAnB,CAAP;AACH;;AACD,QAAI,CAAC,KAAKoD,MAAV,EAAkB;AACd,WAAKA,MAAL,GAAcf,UAAU,EAAxB;AACH;;AACD,QAAI,CAAC,KAAKgB,GAAV,EAAe;AACX,WAAKA,GAAL,GAAW,KAAKD,MAAL,CAAYe,UAAZ,IAA0B,KAAKf,MAAL,CAAYe,UAAZ,CAAuB,IAAvB,CAArC;;AACA,UAAI,CAAC,KAAKd,GAAV,EAAe;AACXV,QAAAA,WAAW,CAAC,qDAAD,EAAwD5D,OAAO,CAAC8D,MAAhE,CAAX;AACA,eAAO,KAAKoB,aAAL,CAAmBjE,YAAnB,CAAP;AACH;AACJ;;AACD,SAAKoD,MAAL,CAAYnC,KAAZ,GAAoBiD,IAAI,CAACjC,SAAzB;AACA,SAAKmB,MAAL,CAAYjC,MAAZ,GAAqB+C,IAAI,CAAChC,UAA1B;AACA,QAAI3E,KAAK,GAAGyC,YAAZ;;AACA,QAAI;AACA,WAAKqD,GAAL,CAASe,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyBF,IAAI,CAACjC,SAA9B,EAAyCiC,IAAI,CAAChC,UAA9C;AACA,WAAKmB,GAAL,CAASgB,SAAT,CAAmBtD,QAAnB,EAA6BmD,IAAI,CAACrC,OAAlC,EAA2CqC,IAAI,CAACpC,MAAhD,EAAwDoC,IAAI,CAACnC,QAA7D,EAAuEmC,IAAI,CAAClC,SAA5E,EAAuF,CAAvF,EAA0F,CAA1F,EAA6FkC,IAAI,CAACjC,SAAlG,EAA6GiC,IAAI,CAAChC,UAAlH;AACA,UAAIoC,UAAU,GAAG,KAAKjB,GAAL,CAASkB,YAAT,CAAsB,CAAtB,EAAyB,CAAzB,EAA4BL,IAAI,CAACjC,SAAjC,EAA4CiC,IAAI,CAAChC,UAAjD,EAA6DvE,IAA9E;AACAJ,MAAAA,KAAK,GAAG,KAAKiH,kBAAL,CAAwBF,UAAxB,EAAoCvF,OAApC,CAAR;AACH,KALD,CAMA,OAAO0F,CAAP,EAAU;AACN9B,MAAAA,WAAW,CAAC,wCAAwClB,MAAM,CAACV,QAAD,CAA9C,GAA2D,+EAA5D,EAA6IhC,OAAO,CAAC8D,MAArJ,EAA6J4B,CAA7J,CAAX;AACH;;AACD,WAAO,KAAKR,aAAL,CAAmB1G,KAAnB,CAAP;AACH,GApCD;AAqCA;AACJ;AACA;;;AACI4F,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BkB,kBAA3B,GAAgD,UAAUzH,GAAV,EAAegC,OAAf,EAAwB;AACpEA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,QAAI2F,aAAa,GAAG,CAApB;AACA,QAAIC,SAAS,GAAG5H,GAAG,CAACF,MAApB;AACA,QAAImD,YAAY,GAAGI,eAAe,CAACrB,OAAD,CAAlC;;AACA,QAAI4F,SAAS,GAAGD,aAAhB,EAA+B;AAC3B,aAAO1E,YAAP;AACH;;AACD,QAAIlB,GAAG,GAAG6F,SAAS,GAAGA,SAAS,GAAGD,aAAlC;AACA,QAAIxF,IAAI,GAAG,CAACH,OAAO,CAACG,IAAR,IAAgB,CAAjB,IAAsBwF,aAAjC;AACA,QAAIE,SAAJ;;AACA,YAAQ7F,OAAO,CAAC6F,SAAR,IAAqB,MAA7B;AACI,WAAK,QAAL;AACIA,QAAAA,SAAS,GAAG3E,eAAZ;AACA;;AACJ,WAAK,MAAL;AACI2E,QAAAA,SAAS,GAAG1E,aAAZ;AACA;;AACJ,WAAK,UAAL;AACI0E,QAAAA,SAAS,GAAG/F,iBAAZ;AACA;;AACJ;AACI,cAAMmE,QAAQ,CAACjE,OAAO,CAAC6F,SAAR,GAAoB,wBAArB,CAAd;AAXR;;AAaA,WAAOA,SAAS,CAAC7H,GAAD,EAAM+B,GAAN,EAAW;AACvBkB,MAAAA,YAAY,EAAEA,YADS;AAEvBnC,MAAAA,YAAY,EAAER,mBAAmB,CAAC0B,OAAO,CAAClB,YAAT,CAFV;AAGvBqB,MAAAA,IAAI,EAAEA;AAHiB,KAAX,CAAhB;AAKH,GA7BD;AA8BA;AACJ;AACA;;;AACIiE,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BW,aAA3B,GAA2C,UAAU1G,KAAV,EAAiB;AACxD,QAAIsH,GAAG,GAAGtH,KAAK,CAACuH,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAV;AACA,QAAIC,IAAI,GAAG,CAACxH,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,EAAqBA,KAAK,CAAC,CAAD,CAA1B,EAA+BA,KAAK,CAAC,CAAD,CAAL,GAAW,GAA1C,CAAX;AACA,QAAIyH,WAAW,GAAG9H,MAAM,CAACK,KAAD,CAAxB;AACA,WAAO;AACHA,MAAAA,KAAK,EAAE,CAACA,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,EAAqBA,KAAK,CAAC,CAAD,CAA1B,EAA+BA,KAAK,CAAC,CAAD,CAApC,CADJ;AAEHsH,MAAAA,GAAG,EAAE,SAASA,GAAG,CAAC5H,IAAJ,CAAS,GAAT,CAAT,GAAyB,GAF3B;AAGH8H,MAAAA,IAAI,EAAE,UAAUA,IAAI,CAAC9H,IAAL,CAAU,GAAV,CAAV,GAA2B,GAH9B;AAIHgI,MAAAA,GAAG,EAAEnI,UAAU,CAAC+H,GAAD,CAJZ;AAKHK,MAAAA,IAAI,EAAEpI,UAAU,CAACS,KAAD,CALb;AAMHL,MAAAA,MAAM,EAAE8H,WANL;AAOHG,MAAAA,OAAO,EAAE,CAACH;AAPP,KAAP;AASH,GAbD;AAcA;AACJ;AACA;;;AACI7B,EAAAA,gBAAgB,CAACG,SAAjB,CAA2B8B,OAA3B,GAAqC,YAAY;AAC7C,SAAKhC,MAAL,GAAc,IAAd;AACA,SAAKC,GAAL,GAAW,IAAX;AACH,GAHD;;AAIAF,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BO,eAA3B,GAA6C,UAAU9C,QAAV,EAAoBhC,OAApB,EAA6B;AACtE,QAAIsG,KAAK,GAAG,IAAZ;;AACA,WAAO,IAAI7B,OAAJ,CAAY,UAAUQ,OAAV,EAAmBP,MAAnB,EAA2B;AAC1C,UAAI6B,MAAM,GAAG,YAAY;AACrBC,QAAAA,YAAY;;AACZ,YAAInI,MAAM,GAAGiI,KAAK,CAACtB,QAAN,CAAehD,QAAf,EAAyBhC,OAAzB,CAAb;;AACA,YAAI3B,MAAM,CAAC0F,KAAX,EAAkB;AACdW,UAAAA,MAAM,CAACrG,MAAM,CAAC0F,KAAR,CAAN;AACH,SAFD,MAGK;AACDkB,UAAAA,OAAO,CAAC5G,MAAD,CAAP;AACH;AACJ,OATD;;AAUA,UAAIoI,OAAO,GAAG,YAAY;AACtBD,QAAAA,YAAY;AACZ9B,QAAAA,MAAM,CAACT,QAAQ,CAAC,2BAA2BjC,QAAQ,CAACM,GAApC,GAA0C,KAA3C,CAAT,CAAN;AACH,OAHD;;AAIA,UAAIoE,OAAO,GAAG,YAAY;AACtBF,QAAAA,YAAY;AACZ9B,QAAAA,MAAM,CAACT,QAAQ,CAAC,aAAajC,QAAQ,CAACM,GAAtB,GAA4B,qBAA7B,CAAT,CAAN;AACH,OAHD;;AAIA,UAAIkE,YAAY,GAAG,YAAY;AAC3BxE,QAAAA,QAAQ,CAAC2E,mBAAT,CAA6B,MAA7B,EAAqCJ,MAArC;AACAvE,QAAAA,QAAQ,CAAC2E,mBAAT,CAA6B,OAA7B,EAAsCF,OAAtC;AACAzE,QAAAA,QAAQ,CAAC2E,mBAAT,CAA6B,OAA7B,EAAsCD,OAAtC;AACH,OAJD;;AAKA1E,MAAAA,QAAQ,CAAC4E,gBAAT,CAA0B,MAA1B,EAAkCL,MAAlC;AACAvE,MAAAA,QAAQ,CAAC4E,gBAAT,CAA0B,OAA1B,EAAmCH,OAAnC;AACAzE,MAAAA,QAAQ,CAAC4E,gBAAT,CAA0B,OAA1B,EAAmCF,OAAnC;AACH,KA3BM,CAAP;AA4BH,GA9BD;;AA+BA,SAAOtC,gBAAP;AACH,CA3JqC,EAAtC;;AA6JA,SAASA,gBAAgB,IAAIyC,OAA7B","sourcesContent":["/*! Fast Average Color | Â© 2021 Denis Seleznev | MIT License | https://github.com/fast-average-color/fast-average-color */\nfunction toHex(num) {\n    var str = num.toString(16);\n    return str.length === 1 ? '0' + str : str;\n}\nfunction arrayToHex(arr) {\n    return '#' + arr.map(toHex).join('');\n}\nfunction isDark(color) {\n    // http://www.w3.org/TR/AERT#color-contrast\n    var result = (color[0] * 299 + color[1] * 587 + color[2] * 114) / 1000;\n    return result < 128;\n}\nfunction prepareIgnoredColor(color) {\n    if (!color) {\n        return [];\n    }\n    return isRGBArray(color) ? color : [color];\n}\nfunction isRGBArray(value) {\n    return Array.isArray(value[0]);\n}\nfunction isIgnoredColor(data, index, ignoredColor) {\n    for (var i = 0; i < ignoredColor.length; i++) {\n        if (isIgnoredColorAsNumbers(data, index, ignoredColor[i])) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isIgnoredColorAsNumbers(data, index, ignoredColor) {\n    switch (ignoredColor.length) {\n        case 3:\n            // [red, green, blue]\n            if (isIgnoredRGBColor(data, index, ignoredColor)) {\n                return true;\n            }\n            break;\n        case 4:\n            // [red, green, blue, alpha]\n            if (isIgnoredRGBAColor(data, index, ignoredColor)) {\n                return true;\n            }\n            break;\n        case 5:\n            // [red, green, blue, alpha, threshold]\n            if (isIgnoredRGBAColorWithThreshold(data, index, ignoredColor)) {\n                return true;\n            }\n            break;\n        default:\n            return false;\n    }\n}\nfunction isIgnoredRGBColor(data, index, ignoredColor) {\n    // Ignore if the pixel are transparent.\n    if (data[index + 3] !== 255) {\n        return true;\n    }\n    if (data[index] === ignoredColor[0] &&\n        data[index + 1] === ignoredColor[1] &&\n        data[index + 2] === ignoredColor[2]) {\n        return true;\n    }\n    return false;\n}\nfunction isIgnoredRGBAColor(data, index, ignoredColor) {\n    if (data[index + 3] && ignoredColor[3]) {\n        return data[index] === ignoredColor[0] &&\n            data[index + 1] === ignoredColor[1] &&\n            data[index + 2] === ignoredColor[2] &&\n            data[index + 3] === ignoredColor[3];\n    }\n    // Ignore rgb components if the pixel are fully transparent.\n    return data[index + 3] === ignoredColor[3];\n}\nfunction inRange(colorComponent, ignoredColorComponent, value) {\n    return colorComponent >= (ignoredColorComponent - value) &&\n        colorComponent <= (ignoredColorComponent + value);\n}\nfunction isIgnoredRGBAColorWithThreshold(data, index, ignoredColor) {\n    var redIgnored = ignoredColor[0];\n    var greenIgnored = ignoredColor[1];\n    var blueIgnored = ignoredColor[2];\n    var alphaIgnored = ignoredColor[3];\n    var threshold = ignoredColor[4];\n    var alphaData = data[index + 3];\n    var alphaInRange = inRange(alphaData, alphaIgnored, threshold);\n    if (!alphaIgnored) {\n        return alphaInRange;\n    }\n    if (!alphaData && alphaInRange) {\n        return true;\n    }\n    if (inRange(data[index], redIgnored, threshold) &&\n        inRange(data[index + 1], greenIgnored, threshold) &&\n        inRange(data[index + 2], blueIgnored, threshold) &&\n        alphaInRange) {\n        return true;\n    }\n    return false;\n}\n\nfunction dominantAlgorithm(arr, len, options) {\n    var colorHash = {};\n    var divider = 24;\n    var ignoredColor = options.ignoredColor;\n    var step = options.step;\n    var max = [0, 0, 0, 0, 0];\n    for (var i = 0; i < len; i += step) {\n        var red = arr[i];\n        var green = arr[i + 1];\n        var blue = arr[i + 2];\n        var alpha = arr[i + 3];\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n        var key = Math.round(red / divider) + ',' +\n            Math.round(green / divider) + ',' +\n            Math.round(blue / divider);\n        if (colorHash[key]) {\n            colorHash[key] = [\n                colorHash[key][0] + red * alpha,\n                colorHash[key][1] + green * alpha,\n                colorHash[key][2] + blue * alpha,\n                colorHash[key][3] + alpha,\n                colorHash[key][4] + 1\n            ];\n        }\n        else {\n            colorHash[key] = [red * alpha, green * alpha, blue * alpha, alpha, 1];\n        }\n        if (max[4] < colorHash[key][4]) {\n            max = colorHash[key];\n        }\n    }\n    var redTotal = max[0];\n    var greenTotal = max[1];\n    var blueTotal = max[2];\n    var alphaTotal = max[3];\n    var count = max[4];\n    return alphaTotal ? [\n        Math.round(redTotal / alphaTotal),\n        Math.round(greenTotal / alphaTotal),\n        Math.round(blueTotal / alphaTotal),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction simpleAlgorithm(arr, len, options) {\n    var redTotal = 0;\n    var greenTotal = 0;\n    var blueTotal = 0;\n    var alphaTotal = 0;\n    var count = 0;\n    var ignoredColor = options.ignoredColor;\n    var step = options.step;\n    for (var i = 0; i < len; i += step) {\n        var alpha = arr[i + 3];\n        var red = arr[i] * alpha;\n        var green = arr[i + 1] * alpha;\n        var blue = arr[i + 2] * alpha;\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n        redTotal += red;\n        greenTotal += green;\n        blueTotal += blue;\n        alphaTotal += alpha;\n        count++;\n    }\n    return alphaTotal ? [\n        Math.round(redTotal / alphaTotal),\n        Math.round(greenTotal / alphaTotal),\n        Math.round(blueTotal / alphaTotal),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction sqrtAlgorithm(arr, len, options) {\n    var redTotal = 0;\n    var greenTotal = 0;\n    var blueTotal = 0;\n    var alphaTotal = 0;\n    var count = 0;\n    var ignoredColor = options.ignoredColor;\n    var step = options.step;\n    for (var i = 0; i < len; i += step) {\n        var red = arr[i];\n        var green = arr[i + 1];\n        var blue = arr[i + 2];\n        var alpha = arr[i + 3];\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n        redTotal += red * red * alpha;\n        greenTotal += green * green * alpha;\n        blueTotal += blue * blue * alpha;\n        alphaTotal += alpha;\n        count++;\n    }\n    return alphaTotal ? [\n        Math.round(Math.sqrt(redTotal / alphaTotal)),\n        Math.round(Math.sqrt(greenTotal / alphaTotal)),\n        Math.round(Math.sqrt(blueTotal / alphaTotal)),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction getDefaultColor(options) {\n    return getOption(options, 'defaultColor', [0, 0, 0, 0]);\n}\nfunction getOption(options, name, defaultValue) {\n    return (options[name] === undefined ? defaultValue : options[name]);\n}\n\nvar MIN_SIZE = 10;\nvar MAX_SIZE = 100;\nfunction isSvg(filename) {\n    return filename.search(/\\.svg(\\?|$)/i) !== -1;\n}\nfunction getOriginalSize(resource) {\n    if (resource instanceof HTMLImageElement) {\n        var width = resource.naturalWidth;\n        var height = resource.naturalHeight;\n        // For SVG images with only viewBox attr.\n        if (!resource.naturalWidth && isSvg(resource.src)) {\n            width = height = MAX_SIZE;\n        }\n        return {\n            width: width,\n            height: height,\n        };\n    }\n    if (resource instanceof HTMLVideoElement) {\n        return {\n            width: resource.videoWidth,\n            height: resource.videoHeight\n        };\n    }\n    return {\n        width: resource.width,\n        height: resource.height\n    };\n}\nfunction getSrc(resource) {\n    return resource instanceof HTMLCanvasElement ? 'canvas' : resource.src;\n}\nfunction prepareSizeAndPosition(originalSize, options) {\n    var srcLeft = getOption(options, 'left', 0);\n    var srcTop = getOption(options, 'top', 0);\n    var srcWidth = getOption(options, 'width', originalSize.width);\n    var srcHeight = getOption(options, 'height', originalSize.height);\n    var destWidth = srcWidth;\n    var destHeight = srcHeight;\n    if (options.mode === 'precision') {\n        return {\n            srcLeft: srcLeft,\n            srcTop: srcTop,\n            srcWidth: srcWidth,\n            srcHeight: srcHeight,\n            destWidth: destWidth,\n            destHeight: destHeight\n        };\n    }\n    var factor;\n    if (srcWidth > srcHeight) {\n        factor = srcWidth / srcHeight;\n        destWidth = MAX_SIZE;\n        destHeight = Math.round(destWidth / factor);\n    }\n    else {\n        factor = srcHeight / srcWidth;\n        destHeight = MAX_SIZE;\n        destWidth = Math.round(destHeight / factor);\n    }\n    if (destWidth > srcWidth || destHeight > srcHeight ||\n        destWidth < MIN_SIZE || destHeight < MIN_SIZE) {\n        destWidth = srcWidth;\n        destHeight = srcHeight;\n    }\n    return {\n        srcLeft: srcLeft,\n        srcTop: srcTop,\n        srcWidth: srcWidth,\n        srcHeight: srcHeight,\n        destWidth: destWidth,\n        destHeight: destHeight\n    };\n}\nfunction makeCanvas() {\n    return typeof window === 'undefined' ?\n        new OffscreenCanvas(1, 1) :\n        document.createElement('canvas');\n}\n\nvar ERROR_PREFIX = 'FastAverageColor: ';\nfunction outputError(message, silent, error) {\n    if (!silent) {\n        console.error(ERROR_PREFIX + message);\n        if (error) {\n            console.error(error);\n        }\n    }\n}\nfunction getError(text) {\n    return Error(ERROR_PREFIX + text);\n}\n\nvar FastAverageColor = /** @class */ (function () {\n    function FastAverageColor() {\n        this.canvas = null;\n        this.ctx = null;\n    }\n    /**\n     * Get asynchronously the average color from not loaded image.\n     */\n    FastAverageColor.prototype.getColorAsync = function (resource, options) {\n        if (!resource) {\n            return Promise.reject(getError('call .getColorAsync() without resource.'));\n        }\n        if (typeof resource === 'string') {\n            var img = new Image();\n            img.crossOrigin = '';\n            img.src = resource;\n            return this.bindImageEvents(img, options);\n        }\n        else if (resource instanceof Image && !resource.complete) {\n            return this.bindImageEvents(resource, options);\n        }\n        else {\n            var result = this.getColor(resource, options);\n            return result.error ? Promise.reject(result.error) : Promise.resolve(result);\n        }\n    };\n    /**\n     * Get the average color from images, videos and canvas.\n     */\n    FastAverageColor.prototype.getColor = function (resource, options) {\n        options = options || {};\n        var defaultColor = getDefaultColor(options);\n        if (!resource) {\n            outputError('call .getColor(null) without resource.', options.silent);\n            return this.prepareResult(defaultColor);\n        }\n        var originalSize = getOriginalSize(resource);\n        var size = prepareSizeAndPosition(originalSize, options);\n        if (!size.srcWidth || !size.srcHeight || !size.destWidth || !size.destHeight) {\n            outputError(\"incorrect sizes for resource \\\"\" + getSrc(resource) + \"\\\".\", options.silent);\n            return this.prepareResult(defaultColor);\n        }\n        if (!this.canvas) {\n            this.canvas = makeCanvas();\n        }\n        if (!this.ctx) {\n            this.ctx = this.canvas.getContext && this.canvas.getContext('2d');\n            if (!this.ctx) {\n                outputError('Canvas Context 2D is not supported in this browser.', options.silent);\n                return this.prepareResult(defaultColor);\n            }\n        }\n        this.canvas.width = size.destWidth;\n        this.canvas.height = size.destHeight;\n        var value = defaultColor;\n        try {\n            this.ctx.clearRect(0, 0, size.destWidth, size.destHeight);\n            this.ctx.drawImage(resource, size.srcLeft, size.srcTop, size.srcWidth, size.srcHeight, 0, 0, size.destWidth, size.destHeight);\n            var bitmapData = this.ctx.getImageData(0, 0, size.destWidth, size.destHeight).data;\n            value = this.getColorFromArray4(bitmapData, options);\n        }\n        catch (e) {\n            outputError(\"security error (CORS) for resource \" + getSrc(resource) + \".\\nDetails: https://developer.mozilla.org/en/docs/Web/HTML/CORS_enabled_image\", options.silent, e);\n        }\n        return this.prepareResult(value);\n    };\n    /**\n     * Get the average color from a array when 1 pixel is 4 bytes.\n     */\n    FastAverageColor.prototype.getColorFromArray4 = function (arr, options) {\n        options = options || {};\n        var bytesPerPixel = 4;\n        var arrLength = arr.length;\n        var defaultColor = getDefaultColor(options);\n        if (arrLength < bytesPerPixel) {\n            return defaultColor;\n        }\n        var len = arrLength - arrLength % bytesPerPixel;\n        var step = (options.step || 1) * bytesPerPixel;\n        var algorithm;\n        switch (options.algorithm || 'sqrt') {\n            case 'simple':\n                algorithm = simpleAlgorithm;\n                break;\n            case 'sqrt':\n                algorithm = sqrtAlgorithm;\n                break;\n            case 'dominant':\n                algorithm = dominantAlgorithm;\n                break;\n            default:\n                throw getError(options.algorithm + \" is unknown algorithm.\");\n        }\n        return algorithm(arr, len, {\n            defaultColor: defaultColor,\n            ignoredColor: prepareIgnoredColor(options.ignoredColor),\n            step: step\n        });\n    };\n    /**\n     * Get color data from value ([r, g, b, a]).\n     */\n    FastAverageColor.prototype.prepareResult = function (value) {\n        var rgb = value.slice(0, 3);\n        var rgba = [value[0], value[1], value[2], value[3] / 255];\n        var isDarkColor = isDark(value);\n        return {\n            value: [value[0], value[1], value[2], value[3]],\n            rgb: 'rgb(' + rgb.join(',') + ')',\n            rgba: 'rgba(' + rgba.join(',') + ')',\n            hex: arrayToHex(rgb),\n            hexa: arrayToHex(value),\n            isDark: isDarkColor,\n            isLight: !isDarkColor\n        };\n    };\n    /**\n     * Destroy the instance.\n     */\n    FastAverageColor.prototype.destroy = function () {\n        this.canvas = null;\n        this.ctx = null;\n    };\n    FastAverageColor.prototype.bindImageEvents = function (resource, options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var onload = function () {\n                unbindEvents();\n                var result = _this.getColor(resource, options);\n                if (result.error) {\n                    reject(result.error);\n                }\n                else {\n                    resolve(result);\n                }\n            };\n            var onerror = function () {\n                unbindEvents();\n                reject(getError(\"Error loading image \\\"\" + resource.src + \"\\\".\"));\n            };\n            var onabort = function () {\n                unbindEvents();\n                reject(getError(\"Image \\\"\" + resource.src + \"\\\" loading aborted.\"));\n            };\n            var unbindEvents = function () {\n                resource.removeEventListener('load', onload);\n                resource.removeEventListener('error', onerror);\n                resource.removeEventListener('abort', onabort);\n            };\n            resource.addEventListener('load', onload);\n            resource.addEventListener('error', onerror);\n            resource.addEventListener('abort', onabort);\n        });\n    };\n    return FastAverageColor;\n}());\n\nexport { FastAverageColor as default };\n"]},"metadata":{},"sourceType":"module"}